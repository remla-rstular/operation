---
- hosts: all
  become: true
  tasks:
    - name: Set authorized key in alternate location
      ansible.posix.authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', item) }}"
      loop: "{{ query('fileglob', 'ssh_keys/*.pub') }}"

    - name: Disable SWAP immediately
      shell: swapoff -a
      register: swapoff_result
      ignore_errors: true
      changed_when: "'0' not in swapoff_result.stdout"

    - name: Remove SWAP entry from /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: "^[^#].*swap.*$"
        state: absent
      when: swapoff_result.rc == 0 or swapoff_result.rc == 1 # Only run if swapoff was successful or already off

    - name: Create /etc/modules-load.d/k8s.conf to load modules on boot
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: "0644"

    - name: Load the br_netfilter module immediately
      modprobe:
        name: br_netfilter
        state: present

    - name: Load the overlay module immediately
      modprobe:
        name: overlay
        state: present

    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: true

    - name: Enable forwarding of bridged IPv4 traffic
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: "1"
        state: present
        reload: true

    - name: Enable forwarding of bridged IPv6 traffic
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: "1"
        state: present
        reload: true

    - name: Generate and copy the /etc/hosts file
      template:
        src: hosts.jinja2
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"

    - name: Get the kubernetes repository GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        state: present

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
        state: present
        update_cache: yes

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - "containerd=1.7.24-0ubuntu1~24.04.2"
          - "runc=1.1.12-0ubuntu3.1"
          - "kubeadm=1.32.4-1.1"
          - "kubelet=1.32.4-1.1"
          - "kubectl=1.32.4-1.1"

    - name: Ensure /etc/containerd directory exists
      file:
        path: /etc/containerd
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Disable AppArmor in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*#?\s*disable_apparmor\s*=\s*).*$'
        line: '\1true'
        backrefs: yes

    - name: Update sandbox image in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*#?\s*sandbox_image\s*=\s*).*$'
        line: '\1"registry.k8s.io/pause:3.10"'
        backrefs: yes

    - name: Set SystemdCgroup to true in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*#?\s*SystemdCgroup\s*=\s*).*$'
        line: '\1true'
        backrefs: yes

    - name: Restart containerd service
      service:
        name: containerd
        state: restarted
        daemon_reload: yes

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_eth1.ipv4.address }}

    - name: Start kubelet service
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
        daemon_reload: yes
